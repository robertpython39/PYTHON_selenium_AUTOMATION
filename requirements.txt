1. python 3.5 or higher
2. selenium pytest, pytest-html libraries installed with pip
3. example of running a test and genering a report:
 - open a command prompt in the root folder where the tests are
 - type in the cmd: pytest -m html --html=<name of file>.html
 - press enter
  -- after pressing enter, the run will begin for the tests inside the .py files and generates a html report for each test that had run.
  -- you can use -v for verbose after pytest (e.g: pytest -v -m html --html=<name of file>.html) to see a more detailed run of the tests
  
  
4. If you want to run only the markers from the tests you can use the following commands:
 a. Go to the root of the folder where the tests are and run the following command in cmd:
	<pythin_filename>.py -m "api" --html=result.html
	or
 b. If you want to run all the tests from the folders and subfolders with the "api" marker run this command in the root folder:
    <folder_root>*\.py -m "api" --html=result.html

Markers used:
 smoke : A marker for smoke tests, which validate fundamental functionality to ensure the core aspects of the application are working as expected and @pytest.mark.smoke
 integration : This marker designates tests that focus on examining the interaction and integration of various components, services, or modules within the system and @pytest.mark.integration
 ui : Marks tests that primarily concentrate on evaluating the user interface (UI), including aspects such as layout, design, and user interaction and @pytest.mark.ui
 api : A marker for tests that specifically target the testing of APIs or web services, ensuring that they function correctly and @pytest.mark.api
 unit : Identifies tests that are focused on individual code units, typically at the function or method level, to ensure they work in isolation and @pytest.mark.unit
 database : Marks tests that involve the testing of database-related functionality, such as data retrieval, storage, and manipulation and @pytest.mark.database
 performance : This marker indicates tests that assess the performance of the application, focusing on response times, scalability, and resource usage and@pytest.mark.performance
 security : Used for tests that aim to uncover security vulnerabilities or verify that security measures are in place and @pytest.mark.security
 regression : A marker for tests that help ensure that new code changes do not reintroduce previously fixed issues or create new ones and @pytest.mark.regression
 bug : Designates tests that are tailored to verify the existence and resolution of specific reported bugs or defects and @pytest.mark.bug
 feature : Marks tests that are dedicated to confirming the correct implementation of new features or functionalities and @pytest.mark.feature
 boundary : This marker is used for tests that explore boundary conditions, edge cases, and limits to ensure robustness and @pytest.mark.boundary
 ux : Identifies tests focused on evaluating the user experience (UX), including aspects related to usability, accessibility, and user satisfaction and @pytest.mark.ux


